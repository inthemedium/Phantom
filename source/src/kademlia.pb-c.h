/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_kademlia_2eproto__INCLUDED
#define PROTOBUF_C_kademlia_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _NodeInfo NodeInfo;
typedef struct _Store Store;
typedef struct _StoreReply StoreReply;
typedef struct _FindCloseNodes FindCloseNodes;
typedef struct _FindCloseNodesReply FindCloseNodesReply;
typedef struct _FindValue FindValue;
typedef struct _FindValueReply FindValueReply;


/* --- enums --- */


/* --- messages --- */

struct  _NodeInfo
{
  ProtobufCMessage base;
  ProtobufCBinaryData id;
  uint32_t port;
  ProtobufCBinaryData cert;
  ProtobufCBinaryData pbc;
  char *ip;
};
#define NODE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&node_info__descriptor) \
    , {0,NULL}, 0, {0,NULL}, {0,NULL}, NULL }


struct  _Store
{
  ProtobufCMessage base;
  ProtobufCBinaryData key;
  ProtobufCBinaryData data;
  NodeInfo *self;
};
#define STORE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&store__descriptor) \
    , {0,NULL}, {0,NULL}, NULL }


struct  _StoreReply
{
  ProtobufCMessage base;
  protobuf_c_boolean success;
};
#define STORE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&store_reply__descriptor) \
    , 0 }


struct  _FindCloseNodes
{
  ProtobufCMessage base;
  ProtobufCBinaryData id;
  NodeInfo *self;
};
#define FIND_CLOSE_NODES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&find_close_nodes__descriptor) \
    , {0,NULL}, NULL }


struct  _FindCloseNodesReply
{
  ProtobufCMessage base;
  size_t n_nodes;
  NodeInfo **nodes;
};
#define FIND_CLOSE_NODES_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&find_close_nodes_reply__descriptor) \
    , 0,NULL }


struct  _FindValue
{
  ProtobufCMessage base;
  ProtobufCBinaryData key;
  NodeInfo *self;
};
#define FIND_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&find_value__descriptor) \
    , {0,NULL}, NULL }


struct  _FindValueReply
{
  ProtobufCMessage base;
  protobuf_c_boolean success;
  size_t n_nodes;
  NodeInfo **nodes;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define FIND_VALUE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&find_value_reply__descriptor) \
    , 0, 0,NULL, 0,{0,NULL} }


/* NodeInfo methods */
void   node_info__init
                     (NodeInfo         *message);
size_t node_info__get_packed_size
                     (const NodeInfo   *message);
size_t node_info__pack
                     (const NodeInfo   *message,
                      uint8_t             *out);
size_t node_info__pack_to_buffer
                     (const NodeInfo   *message,
                      ProtobufCBuffer     *buffer);
NodeInfo *
       node_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   node_info__free_unpacked
                     (NodeInfo *message,
                      ProtobufCAllocator *allocator);
/* Store methods */
void   store__init
                     (Store         *message);
size_t store__get_packed_size
                     (const Store   *message);
size_t store__pack
                     (const Store   *message,
                      uint8_t             *out);
size_t store__pack_to_buffer
                     (const Store   *message,
                      ProtobufCBuffer     *buffer);
Store *
       store__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   store__free_unpacked
                     (Store *message,
                      ProtobufCAllocator *allocator);
/* StoreReply methods */
void   store_reply__init
                     (StoreReply         *message);
size_t store_reply__get_packed_size
                     (const StoreReply   *message);
size_t store_reply__pack
                     (const StoreReply   *message,
                      uint8_t             *out);
size_t store_reply__pack_to_buffer
                     (const StoreReply   *message,
                      ProtobufCBuffer     *buffer);
StoreReply *
       store_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   store_reply__free_unpacked
                     (StoreReply *message,
                      ProtobufCAllocator *allocator);
/* FindCloseNodes methods */
void   find_close_nodes__init
                     (FindCloseNodes         *message);
size_t find_close_nodes__get_packed_size
                     (const FindCloseNodes   *message);
size_t find_close_nodes__pack
                     (const FindCloseNodes   *message,
                      uint8_t             *out);
size_t find_close_nodes__pack_to_buffer
                     (const FindCloseNodes   *message,
                      ProtobufCBuffer     *buffer);
FindCloseNodes *
       find_close_nodes__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   find_close_nodes__free_unpacked
                     (FindCloseNodes *message,
                      ProtobufCAllocator *allocator);
/* FindCloseNodesReply methods */
void   find_close_nodes_reply__init
                     (FindCloseNodesReply         *message);
size_t find_close_nodes_reply__get_packed_size
                     (const FindCloseNodesReply   *message);
size_t find_close_nodes_reply__pack
                     (const FindCloseNodesReply   *message,
                      uint8_t             *out);
size_t find_close_nodes_reply__pack_to_buffer
                     (const FindCloseNodesReply   *message,
                      ProtobufCBuffer     *buffer);
FindCloseNodesReply *
       find_close_nodes_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   find_close_nodes_reply__free_unpacked
                     (FindCloseNodesReply *message,
                      ProtobufCAllocator *allocator);
/* FindValue methods */
void   find_value__init
                     (FindValue         *message);
size_t find_value__get_packed_size
                     (const FindValue   *message);
size_t find_value__pack
                     (const FindValue   *message,
                      uint8_t             *out);
size_t find_value__pack_to_buffer
                     (const FindValue   *message,
                      ProtobufCBuffer     *buffer);
FindValue *
       find_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   find_value__free_unpacked
                     (FindValue *message,
                      ProtobufCAllocator *allocator);
/* FindValueReply methods */
void   find_value_reply__init
                     (FindValueReply         *message);
size_t find_value_reply__get_packed_size
                     (const FindValueReply   *message);
size_t find_value_reply__pack
                     (const FindValueReply   *message,
                      uint8_t             *out);
size_t find_value_reply__pack_to_buffer
                     (const FindValueReply   *message,
                      ProtobufCBuffer     *buffer);
FindValueReply *
       find_value_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   find_value_reply__free_unpacked
                     (FindValueReply *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*NodeInfo_Closure)
                 (const NodeInfo *message,
                  void *closure_data);
typedef void (*Store_Closure)
                 (const Store *message,
                  void *closure_data);
typedef void (*StoreReply_Closure)
                 (const StoreReply *message,
                  void *closure_data);
typedef void (*FindCloseNodes_Closure)
                 (const FindCloseNodes *message,
                  void *closure_data);
typedef void (*FindCloseNodesReply_Closure)
                 (const FindCloseNodesReply *message,
                  void *closure_data);
typedef void (*FindValue_Closure)
                 (const FindValue *message,
                  void *closure_data);
typedef void (*FindValueReply_Closure)
                 (const FindValueReply *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor node_info__descriptor;
extern const ProtobufCMessageDescriptor store__descriptor;
extern const ProtobufCMessageDescriptor store_reply__descriptor;
extern const ProtobufCMessageDescriptor find_close_nodes__descriptor;
extern const ProtobufCMessageDescriptor find_close_nodes_reply__descriptor;
extern const ProtobufCMessageDescriptor find_value__descriptor;
extern const ProtobufCMessageDescriptor find_value_reply__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_kademlia_2eproto__INCLUDED */
